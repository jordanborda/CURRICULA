"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./components/exportWord.js":
/*!**********************************!*\
  !*** ./components/exportWord.js ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exportToWord: () => (/* binding */ exportToWord)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/.pnpm/react@19.1.0/node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var docx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! docx */ \"(pages-dir-browser)/./node_modules/.pnpm/docx@9.5.0/node_modules/docx/dist/index.mjs\");\n/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! file-saver */ \"(pages-dir-browser)/./node_modules/.pnpm/file-saver@2.0.5/node_modules/file-saver/dist/FileSaver.min.js\");\n/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var marked__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! marked */ \"(pages-dir-browser)/./node_modules/.pnpm/marked@15.0.12/node_modules/marked/lib/marked.esm.js\");\n/* harmony import */ var _barrel_optimize_names_CloudDownloadOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=CloudDownloadOutlined!=!@ant-design/icons */ \"(pages-dir-browser)/__barrel_optimize__?names=CloudDownloadOutlined!=!./node_modules/.pnpm/@ant-design+icons@5.6.1_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/@ant-design/icons/es/index.js\");\n// File: components/exportWord.js\n\n\n\n\n\n// --- Funciones Helper para construir el documento DOCX ---\nfunction parseHtmlForDocxRuns(htmlString) {\n    const runs = [];\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = htmlString.trim(); // Trim para evitar nodos de texto vacíos al inicio/final\n    function processNode(currentNode) {\n        let currentOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        if (currentNode.nodeType === Node.TEXT_NODE) {\n            if (currentNode.textContent.trim() !== \"\" || runs.length === 0 || runs[runs.length - 1] && runs[runs.length - 1].break) {\n                runs.push(new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                    text: currentNode.textContent,\n                    ...currentOptions\n                }));\n            }\n        } else if (currentNode.nodeType === Node.ELEMENT_NODE) {\n            const tagName = currentNode.tagName.toLowerCase();\n            let newOptions = {\n                ...currentOptions\n            }; // Heredar opciones\n            if (tagName === 'strong' || tagName === 'b') {\n                newOptions.bold = true;\n            } else if (tagName === 'em' || tagName === 'i') {\n                newOptions.italics = true;\n            } else if (tagName === 'u') {\n                newOptions.underline = {}; // Opciones de subrayado más detalladas disponibles\n            } else if (tagName === 'code') {\n                newOptions.font = {\n                    name: \"Courier New\"\n                };\n            // Podrías añadir un estilo de sombreado o borde aquí si 'docx' lo permite para TextRun\n            } else if (tagName === 'br') {\n                runs.push(new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                    break: 1,\n                    ...newOptions\n                })); // Mantener opciones para el break si aplica\n                // No procesar hijos de <br>\n                return;\n            }\n            // Para otras etiquetas inline, podrías añadir más conversiones (ej. span con estilos)\n            Array.from(currentNode.childNodes).forEach((child)=>processNode(child, newOptions));\n        }\n    }\n    Array.from(tempDiv.childNodes).forEach((child)=>processNode(child));\n    return runs;\n}\nfunction createParagraphFromHtmlNode(htmlNode) {\n    let numberingConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    const runs = parseHtmlForDocxRuns(htmlNode.innerHTML);\n    const paragraphOptions = {\n        children: runs.length > 0 ? runs : [\n            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun(\"\")\n        ]\n    };\n    if (numberingConfig) {\n        paragraphOptions.numbering = {\n            reference: numberingConfig.reference,\n            level: level\n        };\n    }\n    // Aquí podrías añadir lógica para alineación basada en clases CSS si fuera necesario.\n    return new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph(paragraphOptions);\n}\nfunction createTableFromHtmlTable(htmlTableNode) {\n    const rows = [];\n    let columnCount = 0;\n    // Encabezados (thead)\n    htmlTableNode.querySelectorAll('thead tr').forEach((trNode)=>{\n        const cells = [];\n        let currentColumnCountInRow = 0;\n        trNode.querySelectorAll('th').forEach((thNode)=>{\n            cells.push(new docx__WEBPACK_IMPORTED_MODULE_1__.TableCell({\n                children: [\n                    new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: parseHtmlForDocxRuns(thNode.innerHTML),\n                        alignment: docx__WEBPACK_IMPORTED_MODULE_1__.AlignmentType.CENTER\n                    })\n                ],\n                shading: {\n                    fill: \"D9D9D9\",\n                    type: docx__WEBPACK_IMPORTED_MODULE_1__.ShadingType.CLEAR,\n                    color: \"auto\"\n                },\n                verticalAlign: docx__WEBPACK_IMPORTED_MODULE_1__.VerticalAlign.CENTER\n            }));\n            currentColumnCountInRow++;\n        });\n        if (currentColumnCountInRow > columnCount) columnCount = currentColumnCountInRow;\n        if (cells.length > 0) rows.push(new docx__WEBPACK_IMPORTED_MODULE_1__.TableRow({\n            children: cells,\n            tableHeader: true\n        }));\n    });\n    // Cuerpo (tbody)\n    htmlTableNode.querySelectorAll('tbody tr').forEach((trNode)=>{\n        const cells = [];\n        let currentColumnCountInRow = 0;\n        trNode.querySelectorAll('td').forEach((tdNode)=>{\n            const cellParagraphs = [];\n            // Manejar <br> dentro de celdas dividiendo por <br> y creando múltiples párrafos\n            const cellHtmlParts = tdNode.innerHTML.split(/<br\\s*\\/?>/gi);\n            cellHtmlParts.forEach((part)=>{\n                if (part.trim() !== \"\" || cellParagraphs.length === 0) {\n                    cellParagraphs.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: parseHtmlForDocxRuns(part)\n                    }));\n                }\n            });\n            cells.push(new docx__WEBPACK_IMPORTED_MODULE_1__.TableCell({\n                children: cellParagraphs.length > 0 ? cellParagraphs : [\n                    new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph(\"\")\n                ],\n                verticalAlign: docx__WEBPACK_IMPORTED_MODULE_1__.VerticalAlign.TOP\n            }));\n            currentColumnCountInRow++;\n        });\n        if (currentColumnCountInRow > columnCount) columnCount = currentColumnCountInRow;\n        if (cells.length > 0) rows.push(new docx__WEBPACK_IMPORTED_MODULE_1__.TableRow({\n            children: cells\n        }));\n    });\n    if (rows.length === 0) return null;\n    // Definir anchos de columna (ejemplo: distribuir equitativamente)\n    // Esto es muy básico. Para anchos más precisos, necesitarías leer atributos 'width' del HTML\n    // o tener una heurística más avanzada.\n    const columnWidths = columnCount > 0 ? Array(columnCount).fill(100 / columnCount) : [];\n    return new docx__WEBPACK_IMPORTED_MODULE_1__.Table({\n        rows: rows,\n        width: {\n            size: 100,\n            type: docx__WEBPACK_IMPORTED_MODULE_1__.WidthType.PERCENTAGE\n        },\n        // Si tienes columnWidths en porcentaje:\n        columnWidths: columnWidths.map((w)=>100 / columnCount * (9024 / 100)),\n        // O un ancho fijo por columna:\n        // columnWidths: Array(columnCount).fill(convertInchesToTwip(6 / columnCount)),\n        borders: {\n            top: {\n                style: docx__WEBPACK_IMPORTED_MODULE_1__.BorderStyle.SINGLE,\n                size: 1,\n                color: \"000000\"\n            },\n            bottom: {\n                style: docx__WEBPACK_IMPORTED_MODULE_1__.BorderStyle.SINGLE,\n                size: 1,\n                color: \"000000\"\n            },\n            left: {\n                style: docx__WEBPACK_IMPORTED_MODULE_1__.BorderStyle.SINGLE,\n                size: 1,\n                color: \"000000\"\n            },\n            right: {\n                style: docx__WEBPACK_IMPORTED_MODULE_1__.BorderStyle.SINGLE,\n                size: 1,\n                color: \"000000\"\n            },\n            insideHorizontal: {\n                style: docx__WEBPACK_IMPORTED_MODULE_1__.BorderStyle.SINGLE,\n                size: 1,\n                color: \"000000\"\n            },\n            insideVertical: {\n                style: docx__WEBPACK_IMPORTED_MODULE_1__.BorderStyle.SINGLE,\n                size: 1,\n                color: \"000000\"\n            }\n        }\n    });\n}\n// --- Función Principal de Exportación ---\nconst exportToWord = async (markdownContent, programData, notification)=>{\n    console.log('[WORD DOCXJS EXPORT] Iniciando exportación...');\n    if (!markdownContent || markdownContent.trim() === \"\") {\n        notification.warn({\n            message: 'Contenido Vacío',\n            description: 'No hay plan para exportar a Word.'\n        });\n        return;\n    }\n    console.log('[WORD DOCXJS EXPORT] Contenido Markdown (100 chars):', markdownContent.substring(0, 100));\n    try {\n        const htmlString = (0,marked__WEBPACK_IMPORTED_MODULE_3__.marked)(markdownContent, {\n            breaks: true\n        }); // breaks: true para que <br> se maneje mejor\n        console.log('[WORD DOCXJS EXPORT] HTML generado (200 chars):', htmlString.substring(0, 200));\n        const parser = new DOMParser();\n        const htmlDoc = parser.parseFromString(htmlString, 'text/html');\n        const bodyElements = Array.from(htmlDoc.body.children);\n        console.log(\"[WORD DOCXJS EXPORT] \".concat(bodyElements.length, \" elementos principales en HTML body.\"));\n        const docChildren = [];\n        const abstractNumbering = new docx__WEBPACK_IMPORTED_MODULE_1__.AbstractNumbering({\n            levels: [\n                {\n                    level: 0,\n                    format: \"bullet\",\n                    text: \"\\u2022\",\n                    style: {\n                        paragraph: {\n                            indent: {\n                                left: (0,docx__WEBPACK_IMPORTED_MODULE_1__.convertInchesToTwip)(0.25),\n                                hanging: (0,docx__WEBPACK_IMPORTED_MODULE_1__.convertInchesToTwip)(0.25)\n                            }\n                        }\n                    }\n                },\n                {\n                    level: 1,\n                    format: \"bullet\",\n                    text: \"\\u25E6\",\n                    style: {\n                        paragraph: {\n                            indent: {\n                                left: (0,docx__WEBPACK_IMPORTED_MODULE_1__.convertInchesToTwip)(0.5),\n                                hanging: (0,docx__WEBPACK_IMPORTED_MODULE_1__.convertInchesToTwip)(0.25)\n                            }\n                        }\n                    }\n                }\n            ]\n        });\n        const abstractDecimalNumbering = new docx__WEBPACK_IMPORTED_MODULE_1__.AbstractNumbering({\n            levels: [\n                {\n                    level: 0,\n                    format: \"decimal\",\n                    text: \"%1.\",\n                    style: {\n                        paragraph: {\n                            indent: {\n                                left: (0,docx__WEBPACK_IMPORTED_MODULE_1__.convertInchesToTwip)(0.25),\n                                hanging: (0,docx__WEBPACK_IMPORTED_MODULE_1__.convertInchesToTwip)(0.25)\n                            }\n                        }\n                    },\n                    suffix: docx__WEBPACK_IMPORTED_MODULE_1__.LevelSuffix.TAB\n                },\n                {\n                    level: 1,\n                    format: \"lowerLetter\",\n                    text: \"%2)\",\n                    style: {\n                        paragraph: {\n                            indent: {\n                                left: (0,docx__WEBPACK_IMPORTED_MODULE_1__.convertInchesToTwip)(0.5),\n                                hanging: (0,docx__WEBPACK_IMPORTED_MODULE_1__.convertInchesToTwip)(0.25)\n                            }\n                        }\n                    },\n                    suffix: docx__WEBPACK_IMPORTED_MODULE_1__.LevelSuffix.TAB\n                }\n            ]\n        });\n        const listNumbering = new docx__WEBPACK_IMPORTED_MODULE_1__.Numbering({\n            config: [\n                {\n                    reference: \"bullet-numbering\",\n                    abstractNumbering: abstractNumbering\n                },\n                {\n                    reference: \"decimal-numbering\",\n                    abstractNumbering: abstractDecimalNumbering\n                }\n            ]\n        });\n        bodyElements.forEach((element)=>{\n            const tagName = element.tagName.toLowerCase();\n            console.log(\"[WORD DOCXJS EXPORT] Procesando elemento: \".concat(tagName));\n            switch(tagName){\n                case 'h1':\n                    docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: parseHtmlForDocxRuns(element.innerHTML),\n                        heading: docx__WEBPACK_IMPORTED_MODULE_1__.HeadingLevel.HEADING_1\n                    }));\n                    break;\n                case 'h2':\n                    docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: parseHtmlForDocxRuns(element.innerHTML),\n                        heading: docx__WEBPACK_IMPORTED_MODULE_1__.HeadingLevel.HEADING_2\n                    }));\n                    break;\n                case 'h3':\n                    docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: parseHtmlForDocxRuns(element.innerHTML),\n                        heading: docx__WEBPACK_IMPORTED_MODULE_1__.HeadingLevel.HEADING_3\n                    }));\n                    break;\n                case 'h4':\n                    docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: parseHtmlForDocxRuns(element.innerHTML),\n                        heading: docx__WEBPACK_IMPORTED_MODULE_1__.HeadingLevel.HEADING_4\n                    }));\n                    break;\n                case 'h5':\n                    docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: parseHtmlForDocxRuns(element.innerHTML),\n                        heading: docx__WEBPACK_IMPORTED_MODULE_1__.HeadingLevel.HEADING_5\n                    }));\n                    break;\n                case 'h6':\n                    docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: parseHtmlForDocxRuns(element.innerHTML),\n                        heading: docx__WEBPACK_IMPORTED_MODULE_1__.HeadingLevel.HEADING_6\n                    }));\n                    break;\n                case 'p':\n                    docChildren.push(createParagraphFromHtmlNode(element));\n                    break;\n                case 'ul':\n                    Array.from(element.children).forEach((li)=>{\n                        if (li.tagName.toLowerCase() === 'li') {\n                            docChildren.push(createParagraphFromHtmlNode(li, {\n                                reference: \"bullet-numbering\"\n                            }, 0)); // Nivel 0 para UL simple\n                        }\n                    });\n                    break;\n                case 'ol':\n                    Array.from(element.children).forEach((li)=>{\n                        if (li.tagName.toLowerCase() === 'li') {\n                            docChildren.push(createParagraphFromHtmlNode(li, {\n                                reference: \"decimal-numbering\"\n                            }, 0)); // Nivel 0 para OL simple\n                        }\n                    });\n                    break;\n                case 'table':\n                    const docxTable = createTableFromHtmlTable(element);\n                    if (docxTable) docChildren.push(docxTable);\n                    else console.warn(\"[WORD DOCXJS EXPORT] Se omitió una tabla vacía o malformada.\");\n                    break;\n                case 'blockquote':\n                    const bqPara = createParagraphFromHtmlNode(element);\n                    bqPara.options.indent = {\n                        left: (0,docx__WEBPACK_IMPORTED_MODULE_1__.convertInchesToTwip)(0.5)\n                    };\n                    // Podrías definir un estilo para blockquotes con bordes, etc.\n                    docChildren.push(bqPara);\n                    break;\n                case 'pre':\n                    const codeText = element.querySelector('code') ? element.querySelector('code').textContent : element.textContent;\n                    docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: codeText || \"\",\n                                font: {\n                                    name: \"Courier New\",\n                                    size: \"9pt\"\n                                }\n                            })\n                        ],\n                        shading: {\n                            fill: \"F1F1F1\",\n                            type: docx__WEBPACK_IMPORTED_MODULE_1__.ShadingType.CLEAR,\n                            color: \"auto\"\n                        }\n                    }));\n                    break;\n                case 'hr':\n                    docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        // Simulación de HR con un borde inferior de párrafo\n                        border: {\n                            bottom: {\n                                style: docx__WEBPACK_IMPORTED_MODULE_1__.BorderStyle.SINGLE,\n                                size: 6,\n                                color: \"BFBFBF\"\n                            }\n                        }\n                    }));\n                    docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph(\"\")); // Espacio después del HR\n                    break;\n                default:\n                    console.warn(\"[WORD DOCXJS EXPORT] Etiqueta no manejada: \".concat(tagName, \". Intentando como p\\xe1rrafo.\"));\n                    if (element.textContent && element.textContent.trim() !== \"\") {\n                        docChildren.push(createParagraphFromHtmlNode(element));\n                    }\n            }\n        });\n        if (docChildren.length === 0) {\n            console.warn(\"[WORD DOCXJS EXPORT] No se generaron elementos para el documento Word.\");\n            docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph(\"El contenido no pudo ser procesado para Word.\"));\n        }\n        console.log(\"[WORD DOCXJS EXPORT] Creando Document object con docx...\");\n        const doc = new docx__WEBPACK_IMPORTED_MODULE_1__.Document({\n            numbering: listNumbering,\n            sections: [\n                {\n                    properties: {\n                        page: {\n                            margin: {\n                                top: (0,docx__WEBPACK_IMPORTED_MODULE_1__.convertInchesToTwip)(0.75),\n                                right: (0,docx__WEBPACK_IMPORTED_MODULE_1__.convertInchesToTwip)(0.75),\n                                bottom: (0,docx__WEBPACK_IMPORTED_MODULE_1__.convertInchesToTwip)(0.75),\n                                left: (0,docx__WEBPACK_IMPORTED_MODULE_1__.convertInchesToTwip)(0.75)\n                            }\n                        }\n                    },\n                    children: docChildren\n                }\n            ]\n        });\n        console.log(\"[WORD DOCXJS EXPORT] Empaquetando documento con Packer...\");\n        docx__WEBPACK_IMPORTED_MODULE_1__.Packer.toBlob(doc).then((blob)=>{\n            var _programData_degree;\n            console.log(\"[WORD DOCXJS EXPORT] Blob DOCX generado, tama\\xf1o: \".concat(blob.size, \" bytes\"));\n            if (blob.size < 500) {\n                // Este umbral es arbitrario, ajusta si es necesario.\n                console.warn(\"[WORD DOCXJS EXPORT] El blob generado es muy pequeño, podría estar casi vacío o corrupto.\");\n            // Podrías no descargar si es muy pequeño o mostrar una advertencia adicional.\n            }\n            const fileName = \"\".concat((programData === null || programData === void 0 ? void 0 : (_programData_degree = programData.degree) === null || _programData_degree === void 0 ? void 0 : _programData_degree.replace(/\\s+/g, '_')) || 'plan_curricular', \"_\").concat(new Date().toISOString().slice(0, 10), \".docx\");\n            (0,file_saver__WEBPACK_IMPORTED_MODULE_2__.saveAs)(blob, fileName);\n            console.log(\"[WORD DOCXJS EXPORT] saveAs llamado.\");\n            notification.success({\n                message: 'Word Exportado (docx)',\n                description: \"El plan deber\\xeda estar descarg\\xe1ndose como \".concat(fileName, \".\"),\n                placement: 'bottomRight',\n                icon: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_CloudDownloadOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_4__.CloudDownloadOutlined, {\n                    style: {\n                        color: '#52c41a'\n                    }\n                }, void 0, false, {\n                    fileName: \"/home/jordan/Documents/Software Directrices/CURRICULAFORGE/components/exportWord.js\",\n                    lineNumber: 286,\n                    columnNumber: 23\n                }, undefined)\n            });\n        }).catch((packError)=>{\n            console.error('[WORD DOCXJS EXPORT] Error en Packer.toBlob:', packError);\n            notification.error({\n                message: 'Error Empaquetando Word',\n                description: packError.message || 'Fallo al empaquetar el DOCX.'\n            });\n        });\n    } catch (error) {\n        console.error('[WORD DOCXJS EXPORT] Error GENERAL:', error);\n        notification.error({\n            message: 'Error al Exportar Word',\n            description: error.message || 'Problema al generar archivo DOCX.'\n        });\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./components/exportWord.js\n"));

/***/ })

});